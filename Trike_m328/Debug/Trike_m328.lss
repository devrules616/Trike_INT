
Trike_m328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000767  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001831  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#define MOTOR_DDR  DDRC
#define SENSOR_DDR DDRD
#define SENSOR_PORT PORTD
/*----left sensor attached to pin4(PD2/INT0) & right sensor attached to pin5(PD3/INT1)  -----*/
ISR (INT0_vect)
{	MOTOR_PORT=0x12;
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	82 e1       	ldi	r24, 0x12	; 18
  92:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	83 ec       	ldi	r24, 0xC3	; 195
  98:	99 e0       	ldi	r25, 0x09	; 9
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <__vector_1+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <__vector_1+0x24>
  a4:	00 00       	nop
	_delay_ms(400);
	MOTOR_PORT=0x00;
  a6:	18 b8       	out	0x08, r1	; 8
		 MOTOR_PORT=0x14;_delay_ms(400);// MOVE BACK a few hundred milliseconds _delay_ms(400)
		 MOTOR_PORT=0x12;_delay_ms(190);// TURN RIGHT say 90 degrees
		 MOTOR_PORT=0x00;_delay_ms(50);//STOP few milliseconds	_delay_ms(5)
	 }*/
	
}
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_2>:

ISR (INT1_vect)
{	MOTOR_PORT=0x0C;
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	88 b9       	out	0x08, r24	; 8
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__vector_2+0x1a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <__vector_2+0x24>
  dc:	00 00       	nop
	_delay_ms(400);
	MOTOR_PORT=0x00;
  de:	18 b8       	out	0x08, r1	; 8
		MOTOR_PORT=0x00;_delay_ms(50);//STOP few milliseconds	_delay_ms(5)
		MOTOR_PORT=0x14;_delay_ms(400);// MOVE BACK a few hundred milliseconds _delay_ms(400)
		MOTOR_PORT=0x0C;_delay_ms(190);// TURN LEFT say 90 degrees
		MOTOR_PORT=0x00;_delay_ms(50);//STOP few milliseconds	_delay_ms(5)
	}*/
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:


int main(void)
{	EICRA |= (1 << ISC01) | (1 << ISC11);   // Falling edge for INT0 and INT1
  f0:	e9 e6       	ldi	r30, 0x69	; 105
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8a 60       	ori	r24, 0x0A	; 10
  f8:	80 83       	st	Z, r24
	EICRA &= ~((1 << ISC00) | (1 << ISC10));
  fa:	80 81       	ld	r24, Z
  fc:	8a 7f       	andi	r24, 0xFA	; 250
  fe:	80 83       	st	Z, r24
	EIMSK |= ((1<<INT1)|(1<<INT0));
 100:	8d b3       	in	r24, 0x1d	; 29
 102:	83 60       	ori	r24, 0x03	; 3
 104:	8d bb       	out	0x1d, r24	; 29
	
	SENSOR_DDR &= ~(1<<PIND2);
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	8a b9       	out	0x0a, r24	; 10
	SENSOR_DDR &= ~(1<<PIND3);	//PD2 , PD3 set as inputs
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	8a b9       	out	0x0a, r24	; 10
	SENSOR_PORT |= (1 << PIND2) | (1 << PIND3);		//pull up enabled
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	8b b9       	out	0x0b, r24	; 11
	MOTOR_DDR =0x1E;		//0x1E		0b00011110 to set reqd. pins as output
 118:	8e e1       	ldi	r24, 0x1E	; 30
 11a:	87 b9       	out	0x07, r24	; 7
    MOTOR_PORT=0x00;		// init to DEAD STOP
 11c:	18 b8       	out	0x08, r1	; 8
	sei();		//interrupt enabled
 11e:	78 94       	sei
    while (1) 
    {
		//fwd movement code	IN1-1, IN2-0, IN3-1, IN4-0
	MOTOR_PORT=0x0A;
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	88 b9       	out	0x08, r24	; 8
 124:	fd cf       	rjmp	.-6      	; 0x120 <main+0x30>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
